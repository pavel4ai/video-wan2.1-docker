// Global variables
let metricsIntervalId = null;
let charts = {};

// Simple debug logger
function log(message, data) {
    console.log(`[DEBUG] ${message}`, data || '');
}

// Initialize the dashboard when the DOM is loaded
window.addEventListener('DOMContentLoaded', function() {
    log('DOM content loaded, initializing dashboard...');
    
    // Check if Chart.js is loaded
    if (typeof Chart === 'undefined') {
        console.error('Chart.js is not loaded! Charts will not render.');
        document.getElementById('systemMetrics').innerHTML = '<div style="color:red">Error: Chart.js library not loaded</div>';
        return;
    }
    
    // Check if luxon is loaded
    if (typeof luxon === 'undefined') {
        console.error('Luxon is not loaded! Time-based charts will not render correctly.');
    }
    
    // Add event listener for speed test button
    const speedTestButton = document.getElementById('startSpeedTestButton');
    if (speedTestButton) {
        speedTestButton.addEventListener('click', runSpeedTest);
        log('Speed test button event listener attached');
    } else {
        console.error('Speed test button not found in DOM');
    }
    
    // Start metrics polling
    log('Starting metrics polling...');
    updateMetricsDisplay(); // Initial update
    metricsIntervalId = setInterval(updateMetricsDisplay, 3000);
    
    // Start video list polling
    log('Starting video list polling...');
    updateVideoList(); // Initial update
    setInterval(updateVideoList, 30000);
    
    log('Dashboard initialization complete');
});

// Create or update a chart
function createOrUpdateChart(canvasId, chartType, labels, datasets, options) {
    log(`Creating/updating chart: ${canvasId}`);
    
    // Get the canvas element
    const canvas = document.getElementById(canvasId);
    if (!canvas) {
        console.error(`Canvas element with ID ${canvasId} not found`);
        return null;
    }
    
    // Get the 2D context
    const ctx = canvas.getContext('2d');
    if (!ctx) {
        console.error(`Could not get 2D context for canvas ${canvasId}`);
        return null;
    }
    
    // Create or update the chart
    if (charts[canvasId]) {
        log(`Updating existing chart: ${canvasId}`);
        charts[canvasId].data.labels = labels;
        charts[canvasId].data.datasets = datasets;
        charts[canvasId].update();
        return charts[canvasId];
    } else {
        log(`Creating new chart: ${canvasId}`);
        try {
            charts[canvasId] = new Chart(ctx, {
                type: chartType,
                data: {
                    labels: labels,
                    datasets: datasets
                },
                options: options || {
                    responsive: true,
                    maintainAspectRatio: true
                }
            });
            return charts[canvasId];
        } catch (error) {
            console.error(`Error creating chart ${canvasId}:`, error);
            return null;
        }
    }
}

// Create a canvas element
function createCanvas(containerId, canvasId, title) {
    log(`Creating canvas: ${canvasId} in container: ${containerId}`);
    
    // Get the container element
    const container = document.getElementById(containerId);
    if (!container) {
        console.error(`Container element with ID ${containerId} not found`);
        return null;
    }
    
    // Check if canvas already exists
    let canvas = document.getElementById(canvasId);
    if (canvas) {
        log(`Canvas ${canvasId} already exists`);
        return canvas;
    }
    
    // Create a new div for the chart
    const chartDiv = document.createElement('div');
    chartDiv.className = 'chart-container';
    
    // Add a title if provided
    if (title) {
        const titleElement = document.createElement('h5');
        titleElement.textContent = title;
        chartDiv.appendChild(titleElement);
    }
    
    // Create the canvas element
    canvas = document.createElement('canvas');
    canvas.id = canvasId;
    canvas.width = 800;
    canvas.height = 400;
    canvas.style.display = 'block';
    
    // Add the canvas to the chart div
    chartDiv.appendChild(canvas);
    
    // Add the chart div to the container
    container.appendChild(chartDiv);
    
    log(`Canvas ${canvasId} created successfully`);
    return canvas;
}

// Update the metrics display
function updateMetricsDisplay() {
    log('Fetching metrics data...');
    
    fetch('/api/metrics')
        .then(response => {
            log(`Fetch response status: ${response.status}`);
            
            if (!response.ok) {
                if (response.status === 404) {
                    log('Metrics endpoint returned 404, assuming test ended.');
                    document.getElementById('videoStatus').textContent = 'Status: Test ended or metrics unavailable.';
                    stopMetricsPolling('Metrics endpoint 404. Stopping polling.');
                    return null;
                }
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            return response.json();
        })
        .then(metrics => {
            if (!metrics) {
                log('No metrics data received');
                return;
            }
            
            log(`Received metrics data with keys: ${Object.keys(metrics)}`);
            
            // Clear existing charts
            const metricsDiv = document.getElementById('systemMetrics');
            if (!metricsDiv) {
                console.error('systemMetrics div not found');
                return;
            }
            
            // Clear existing charts
            for (const chartId in charts) {
                if (charts[chartId]) {
                    charts[chartId].destroy();
                }
            }
            charts = {};
            metricsDiv.innerHTML = '';
            
            // Process timestamps
            let timestamps = [];
            if (metrics.cpu && metrics.cpu.timestamps) {
                timestamps = metrics.cpu.timestamps;
            } else if (metrics.memory && metrics.memory.timestamps) {
                timestamps = metrics.memory.timestamps;
            } else if (metrics.disk && metrics.disk.timestamps) {
                timestamps = metrics.disk.timestamps;
            } else if (metrics.gpu && metrics.gpu[0] && metrics.gpu[0].timestamps) {
                timestamps = metrics.gpu[0].timestamps;
            }
            
            // Convert timestamps to chart labels
            let chartLabels = timestamps;
            if (typeof luxon !== 'undefined') {
                try {
                    chartLabels = timestamps.map(ts => 
                        luxon.DateTime.fromISO(ts, { zone: 'utc' }).setZone('America/New_York').valueOf()
                    );
                } catch (error) {
                    console.error('Error converting timestamps with luxon:', error);
                }
            }
            
            // Check if test is active
            if (metrics.video_test_active === false && metricsIntervalId) {
                document.getElementById('videoStatus').textContent = 'Status: Video generation completed.';
                stopMetricsPolling('Video test finished. Stopping metrics polling.');
            }
            
            // Create charts for each metric type
            createMetricsCharts(metricsDiv, metrics, chartLabels);
        })
        .catch(error => {
            console.error('Error fetching metrics:', error);
            document.getElementById('systemMetrics').innerHTML = `<div style="color:red">Error loading metrics: ${error.message}</div>`;
            stopMetricsPolling();
        });
}

// Create charts for each metric type
function createMetricsCharts(container, metrics, chartLabels) {
    // CPU Chart
    if (metrics.cpu && metrics.cpu.data) {
        log('Creating CPU chart');
        
        const canvasId = 'cpuChart';
        createCanvas('systemMetrics', canvasId, 'CPU Usage (%)');
        
        const datasets = [
            { label: '%user', data: metrics.cpu.data['user'] || [], borderColor: 'blue', tension: 0.1 },
            { label: '%system', data: metrics.cpu.data['system'] || [], borderColor: 'red', tension: 0.1 },
            { label: '%idle', data: metrics.cpu.data['idle'] || [], borderColor: 'green', tension: 0.1 }
        ];
        
        const options = {
            responsive: true,
            maintainAspectRatio: true,
            scales: {
                x: {
                    type: 'time',
                    time: {
                        unit: 'second',
                        displayFormats: {
                            second: 'HH:mm:ss'
                        }
                    }
                },
                y: {
                    beginAtZero: true
                }
            },
            plugins: {
                legend: { position: 'top' }
            }
        };
        
        createOrUpdateChart(canvasId, 'line', chartLabels, datasets, options);
    }
    
    // Memory Chart
    if (metrics.memory && metrics.memory.data) {
        log('Creating Memory chart');
        
        const canvasId = 'memoryChart';
        createCanvas('systemMetrics', canvasId, 'Memory Usage (% Used)');
        
        const datasets = [
            { label: '%memused', data: metrics.memory.data['memused'] || [], borderColor: 'purple', tension: 0.1 }
        ];
        
        const options = {
            responsive: true,
            maintainAspectRatio: true,
            scales: {
                x: {
                    type: 'time',
                    time: {
                        unit: 'second',
                        displayFormats: {
                            second: 'HH:mm:ss'
                        }
                    }
                },
                y: {
                    beginAtZero: true
                }
            },
            plugins: {
                legend: { position: 'top' }
            }
        };
        
        createOrUpdateChart(canvasId, 'line', chartLabels, datasets, options);
    }
    
    // Disk I/O Chart
    if (metrics.disk && metrics.disk.data) {
        log('Creating Disk I/O chart');
        
        const canvasId = 'diskChart';
        const deviceName = metrics.disk.device || 'N/A';
        createCanvas('systemMetrics', canvasId, `Disk I/O (kB/s) - ${deviceName}`);
        
        const datasets = [
            { label: 'Read kB/s', data: metrics.disk.data['rkB_s'] || [], borderColor: 'orange', tension: 0.1 },
            { label: 'Write kB/s', data: metrics.disk.data['wkB_s'] || [], borderColor: 'brown', tension: 0.1 }
        ];
        
        const options = {
            responsive: true,
            maintainAspectRatio: true,
            scales: {
                x: {
                    type: 'time',
                    time: {
                        unit: 'second',
                        displayFormats: {
                            second: 'HH:mm:ss'
                        }
                    }
                },
                y: {
                    beginAtZero: true
                }
            },
            plugins: {
                legend: { position: 'top' }
            }
        };
        
        createOrUpdateChart(canvasId, 'line', chartLabels, datasets, options);
    }
    
    // GPU Charts
    if (metrics.gpu && Array.isArray(metrics.gpu)) {
        metrics.gpu.forEach((gpuData, index) => {
            log(`Creating GPU ${index} charts`);
            
            // GPU Utilization & Memory Chart
            const utilMemCanvasId = `gpuUtilMemChart_${index}`;
            createCanvas('systemMetrics', utilMemCanvasId, `GPU ${index} Utilization (%) & Memory (MiB)`);
            
            const utilMemDatasets = [
                { label: 'Util [%]', data: gpuData.data['utilization_gpu'] || [], borderColor: 'lime', tension: 0.1, yAxisID: 'yPercent' },
                { label: 'Mem Used [MiB]', data: gpuData.data['memory_used'] || [], borderColor: 'cyan', tension: 0.1, yAxisID: 'yMiB' }
            ];
            
            const utilMemOptions = {
                responsive: true,
                maintainAspectRatio: true,
                scales: {
                    x: {
                        type: 'time',
                        time: {
                            unit: 'second',
                            displayFormats: {
                                second: 'HH:mm:ss'
                            }
                        }
                    },
                    yPercent: {
                        type: 'linear',
                        position: 'left',
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: 'Utilization (%)'
                        }
                    },
                    yMiB: {
                        type: 'linear',
                        position: 'right',
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: 'Memory (MiB)'
                        }
                    }
                },
                plugins: {
                    legend: { position: 'top' }
                }
            };
            
            createOrUpdateChart(utilMemCanvasId, 'line', chartLabels, utilMemDatasets, utilMemOptions);
            
            // GPU Temperature & Power Chart
            const tempPowerCanvasId = `gpuTempPowerChart_${index}`;
            createCanvas('systemMetrics', tempPowerCanvasId, `GPU ${index} Temp (°C) & Power (W)`);
            
            const tempPowerDatasets = [
                { label: 'Temp [°C]', data: gpuData.data['temperature_gpu'] || [], borderColor: 'magenta', tension: 0.1 },
                { label: 'Power [W]', data: gpuData.data['power_draw'] || [], borderColor: 'gold', tension: 0.1 }
            ];
            
            const tempPowerOptions = {
                responsive: true,
                maintainAspectRatio: true,
                scales: {
                    x: {
                        type: 'time',
                        time: {
                            unit: 'second',
                            displayFormats: {
                                second: 'HH:mm:ss'
                            }
                        }
                    },
                    y: {
                        beginAtZero: true
                    }
                },
                plugins: {
                    legend: { position: 'top' }
                }
            };
            
            createOrUpdateChart(tempPowerCanvasId, 'line', chartLabels, tempPowerDatasets, tempPowerOptions);
        });
    }
}

// Stop metrics polling
function stopMetricsPolling(message = 'Polling stopped.') {
    if (metricsIntervalId) {
        clearInterval(metricsIntervalId);
        metricsIntervalId = null;
        log(message);
    }
}

// Speed test functions
function updateStatus(message) {
    document.getElementById('speedTestStatus').textContent = `Status: ${message}`;
}

async function measurePing(samples = 10) {
    updateStatus('Testing latency...');
    let rtts = [];
    const endpoint = '/api/speedtest/ping';
    
    try {
        for (let i = 0; i < samples; i++) {
            const start = performance.now();
            try {
                await fetch(endpoint, { cache: 'no-store' });
                const end = performance.now();
                rtts.push(end - start);
            } catch (e) {
                console.error(`Ping ${i+1} failed:`, e);
            }
            await new Promise(resolve => setTimeout(resolve, 50));
        }

        if (rtts.length === 0) throw new Error('Ping test failed completely.');

        rtts.sort((a, b) => a - b);
        const minPing = rtts[0];
        const avgPing = rtts.reduce((a, b) => a + b, 0) / rtts.length;
        
        const mean = avgPing;
        const variance = rtts.reduce((a, b) => a + Math.pow(b - mean, 2), 0) / rtts.length;
        const jitter = Math.sqrt(variance);
        
        document.getElementById('pingResult').textContent = minPing.toFixed(2);
        document.getElementById('jitterResult').textContent = jitter.toFixed(2);
        updateStatus('Latency test complete.');
        return { ping: minPing, jitter: jitter };
    } catch (err) {
        console.error('Error in ping measurement:', err);
        document.getElementById('pingResult').textContent = 'Error';
        document.getElementById('jitterResult').textContent = 'Error';
        updateStatus('Latency test failed.');
        throw err;
    }
}

async function measureDownload(endpoint = '/api/speedtest/download') {
    updateStatus('Testing download speed...');
    const start = performance.now();
    try {
        const response = await fetch(endpoint, { cache: 'no-store' });
        if (!response.ok) throw new Error(`Server error: ${response.status}`);
        const data = await response.blob();
        const end = performance.now();
        const durationSeconds = (end - start) / 1000;
        const sizeBytes = data.size;
        if (durationSeconds === 0 || sizeBytes === 0) throw new Error('Download test returned no data or took zero time.');
        const speedMbps = (sizeBytes * 8) / (durationSeconds * 1000 * 1000);
        document.getElementById('downloadResult').textContent = speedMbps.toFixed(2);
        updateStatus('Download test complete.');
        return speedMbps;
    } catch (e) {
        document.getElementById('downloadResult').textContent = 'Error';
        throw new Error(`Download test failed: ${e.message}`);
    }
}

async function measureUpload(sizeMB = 10, endpoint = '/api/speedtest/upload') {
    updateStatus('Testing upload speed...');
    const sizeBytes = sizeMB * 1024 * 1024;
    const data = new Blob([new ArrayBuffer(sizeBytes)], {type: 'application/octet-stream'});
    const start = performance.now();
    try {
        const response = await fetch(endpoint, { 
            method: 'POST', 
            body: data, 
            cache: 'no-store' 
        });
        if (!response.ok) throw new Error(`Server error: ${response.status}`);
        const end = performance.now();
        const durationSeconds = (end - start) / 1000;
        if (durationSeconds === 0) throw new Error('Upload test took zero time.');
        const speedMbps = (sizeBytes * 8) / (durationSeconds * 1000 * 1000);
        document.getElementById('uploadResult').textContent = speedMbps.toFixed(2);
        updateStatus('Upload test complete.');
        return speedMbps;
    } catch (e) {
        document.getElementById('uploadResult').textContent = 'Error';
        throw new Error(`Upload test failed: ${e.message}`);
    }
}

async function runSpeedTest() {
    document.getElementById('startSpeedTestButton').disabled = true;
    document.getElementById('pingResult').textContent = '---';
    document.getElementById('jitterResult').textContent = '---';
    document.getElementById('downloadResult').textContent = '---';
    document.getElementById('uploadResult').textContent = '---';
    
    try {
        await measurePing();
        await measureDownload();
        await measureUpload();
        updateStatus('Speed test finished.');
    } catch (error) {
        console.error('Speed test error:', error);
        updateStatus(`Test failed: ${error.message}`);
    } finally {
        document.getElementById('startSpeedTestButton').disabled = false;
    }
}

// Video list functions
async function updateVideoList() {
    try {
        const response = await fetch('/api/videos');
        const videos = await response.json();
        
        const videoList = document.getElementById('videoList');
        videoList.innerHTML = videos.map(video => 
            '<div class="video-item">' +
                '<div>' + video.name + '</div>' +
                '<video controls width="400">' +
                    '<source src="/videos/' + video.name + '" type="video/mp4">' +
                    'Your browser does not support the video tag.' +
                '</video>' +
            '</div>'
        ).join('');
    } catch (error) {
        console.error('Error updating video list:', error);
    }
}

// Fallback initialization in case DOMContentLoaded already fired
if (document.readyState === 'complete' || document.readyState === 'interactive') {
    setTimeout(() => {
        log('Document already loaded, running initialization immediately');
        const event = new Event('DOMContentLoaded');
        window.dispatchEvent(event);
    }, 500);
}
